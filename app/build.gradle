apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

android {
    compileSdkVersion 27
    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.example.steven.stk"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {

        flavorDimensions "level", "environment"

        guest {
            dimension = "level"
            applicationIdSuffix ".guest"
        }
        member {
            dimension = "level"
            applicationIdSuffix ".member"
        }

        dev {
            dimension = "environment"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev-" + getDate()
        }
        uat {
            dimension = "environment"
            applicationIdSuffix ".uat"
            versionNameSuffix "-uat-" + getDate()
        }
        prod {
            dimension = "environment"
            applicationIdSuffix ".prod"
            versionNameSuffix "-prod-" + getDate()
        }

    }

    sourceSets {
        guest.setRoot('level/guest')
        member.setRoot('level/member')

        dev.setRoot('environment/dev')
//        guestDev.setRoot('level/guest/environment/dev')

        uat.setRoot('environment/uat')
        prod.setRoot('environment/prod')
//

    }

    variantFilter { variant ->
        def flavor = variant.flavors.name
        def buildTypeName = variant.buildType.name

        if ((flavor.contains("member") && flavor.contains("prod"))
                ||(flavor.contains("member") && flavor.contains("uat"))
                ||(flavor.contains("guest") && flavor.contains("prod"))
                || buildTypeName.contains("release")) {
            variant.ignore = true
        }
    }
}

def getDate() {
    new Date().format('yyyyMMddHHmmss')
}

ext.retrofitVersion = '2.4.0'
ext.okhttp3Version = '3.10.0'
ext.dagger2Version = '2.15'
ext.androidSupportVersion = "26.1.0"
ext.googlePlayServiceVersion = "15.0.0"
ext.lifecycleVersion = '1.1.1'

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$androidSupportVersion"
    implementation "com.android.support:design:$androidSupportVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:support-vector-drawable:$androidSupportVersion"
    implementation "com.google.android.gms:play-services-ads:$googlePlayServiceVersion"

    //Glide
    implementation('com.github.bumptech.glide:glide:4.7.1') {
        exclude group: "com.android.support"
    }
    kapt 'com.github.bumptech.glide:compiler:4.7.1'

    //Dagger2
    implementation "com.google.dagger:dagger:$dagger2Version"
    kapt "com.google.dagger:dagger-compiler:$dagger2Version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger2Version"

    //RxJava2
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    //Retrofit2
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    //okHttp3
    implementation "com.squareup.okhttp3:okhttp:$okhttp3Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3Version"

    //AdMob
    implementation 'com.google.firebase:firebase-ads:15.0.0'

    //FireBase
    implementation 'com.google.firebase:firebase-core:16.0.0'

    //ExoPlayer
    implementation 'com.google.android.exoplayer:exoplayer:2.7.0'

    //Fabric - Crashlytics
    implementation ('com.crashlytics.sdk.android:crashlytics:2.9.3@aar'){
        transitive = true
    }

    //Google Tag Manager
    implementation 'com.google.android.gms:play-services-analytics:16.0.0'

    // LiveData & ViewModel
    implementation "android.arch.lifecycle:extensions:$lifecycleVersion"

    //Facebook
    implementation 'com.facebook.android:facebook-login:4.33.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'



}

// ADD THIS AT THE BOTTOM
apply plugin: 'com.google.gms.google-services'